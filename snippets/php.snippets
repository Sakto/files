snippet <?
<?php

${0}
endsnippet
snippet larmodel
<?php namespace App\Http\Models;

use Illuminate\Database\Eloquent\Model;

class ${1} extends Model {
	
	protected $table = '${2:$1s}';
	public $timestamps = ${3:true};
	
	public $fillable = [
		'${4}'
	];

	public function ${5}()
	{
		${0}
	}

}
endsnippet
snippet larcontroller
<?php namespace App\Http\Controllers;

class ${1} extends Controller {
	
	public function ${2}()
	{
		${0}
	}

}
endsnippet
snippet lartrait
<?php namespace App\Traits;

trait ${1} {

	public function ${2}()
	{
		${0}
	}

}
endsnippet
snippet <?ns
<?php namespace ${1:App\Http};

${0}
endsnippet
snippet ec
echo ${0};
endsnippet
snippet <?e
<?php echo ${0} ?>
endsnippet
snippet r
return $${0};
# this one is for php5.4
endsnippet
snippet <?=
<?=${0}?>
endsnippet
snippet ?=
<?= ${0} ?>
endsnippet
snippet ?
<?php ${0} ?>
endsnippet
snippet ?f
<?php foreach ($${1:vars} as $${2:$var}): ?>
	${0}
<?php endforeach ?>
endsnippet
snippet ?i
<?php if ($${1:var}): ?>
	${0}
<?php endif ?>
endsnippet
snippet ns
namespace ${1:App\Http};
${0}
endsnippet
snippet use
use ${1:App\Http};
${0}
endsnippet
snippet	c
class ${1:`vim_snippets#Filename()`} extends ${2:Class} {
	
	${0}
	
}
endsnippet
snippet i
interface ${1:`vim_snippets#Filename()`} {
	${0}
}
endsnippet
snippet t.
$this->
endsnippet
snippet f
function ${1}(${3})
{
	${0}
}
# method
endsnippet
snippet m
${1:public} function ${2:foo}()
{
	${0}
}
# Tertiary conditional
endsnippet
snippet =?:
$${1:foo} = ${2:true} ? ${3:a} : ${0};
endsnippet
snippet ?:
${1:true} ? ${2:a} : ${0};

endsnippet
snippet C
$_COOKIE['${1:variable}']
endsnippet
snippet E
$_ENV['${1:variable}']
endsnippet
snippet F
$_FILES['${1:variable}']
endsnippet
snippet G
$_GET['${1:variable}']
endsnippet
snippet P
$_POST['${1:variable}']
endsnippet
snippet R
$_REQUEST['${1:variable}']
endsnippet
snippet S
$_SERVER['${1:variable}']
endsnippet
snippet SS
$_SESSION['${1:variable}']

# Start Docblock
endsnippet
snippet /*
/**
 * ${0}
 */
endsnippet
snippet nc
namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\', 'g')`};

${2:abstract }class ${3:`vim_snippets#Filename()`} {
	
	${4:public} static function ${5:name}()
	{
		${0}
	}
	
}
endsnippet
snippet wh
while (${1:/* condition */}) {
	${0}
}
# do ... while
endsnippet
snippet do
do {
	${0}
} while (${1:/* condition */});
endsnippet
snippet if
if (${1:/* condition */})
{
	${0}
}
endsnippet
snippet ifn
if (!${1:/* condition */})
{
	${2}
}
endsnippet
snippet ifil
<?php if (${1:/* condition */}): ?>
	${0}
<?php endif; ?>
endsnippet
snippet ife
if (${1:/* condition */})
{
	${2}
}
else
{
	${3}
}
${0}
endsnippet
snippet ifeil
<?php if (${1:/* condition */}): ?>
	${2:<!-- html... -->}
<?php else: ?>
	${3:<!-- html... -->}
<?php endif; ?>
${0}
endsnippet
snippet el
else
{
	${0}
}
endsnippet
snippet elil
<?php else: ?>
	${0}
endsnippet
snippet endil
<?php endif; ?>
endsnippet
snippet eif
elseif (${1:/* condition */}) {
	${0}
}
endsnippet
snippet switch
switch ($${1:variable}) {
	case '${2:value}':
		${3}
		break;
	${0}
	default:
		${4}
		break;
}
endsnippet
snippet case
case '${1:value}':
	${2}
	break;
endsnippet
snippet for
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
{
	${0}
}
endsnippet
snippet foreach
foreach ($${1:variable} as $${2:value})
{
	${0}
}
endsnippet
snippet foreachil
<?php foreach ($${1:variable} as $${2:value}): ?>
	${0:<!-- html... -->}
<?php endforeach; ?>
endsnippet
snippet foreachk
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${0}
}
endsnippet
snippet foreachkil
<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>
	${0:<!-- html... -->}
<?php endforeach; ?>
# $... = array (...)
endsnippet
snippet array
$${1:arrayName} = array('${2}' => ${3});
endsnippet
snippet try
try
{
	${0}
}
catch (${1:Exception} $e)
{
	
}
# lambda with closure
endsnippet
snippet lambda
${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
	${0}
};
# pre_dump();
endsnippet
snippet pd
echo '<pre>'; var_dump(${0}); echo '</pre>';
# pre_dump(); die();
endsnippet
snippet pdd
echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${0:});
endsnippet
snippet vd
var_dump(${0});
endsnippet
snippet dd
dd($${0});
endsnippet
snippet vdd
var_dump(${1}); die(${0:});
endsnippet
snippet pr
print_r(${0});
endsnippet
snippet prs
print_r(${0}, 1);
endsnippet
snippet vdf
error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');
endsnippet
snippet http_redirect
header ("HTTP/1.1 301 Moved Permanently");
header ("Location: ".URL);
exit();
endsnippet
snippet rett
return true;
endsnippet
snippet retf
return false;

# phpunit	
endsnippet
snippet ase
$this->assertEquals(${1:expected}, ${2:actual});

endsnippet
snippet asne
$this->assertNotEquals(${1:expected}, ${2:actual});

endsnippet
snippet asf
$this->assertFalse(${1:Something});

endsnippet
snippet ast
$this->assertTrue(${1:Something});

endsnippet
snippet asfex
$this->assertFileExists(${1:path/to/file});

endsnippet
snippet asfnex
$this->assertFileNotExists(${1:path/to/file});

endsnippet
snippet ascon
$this->assertContains(${1:Search Value}, ${2:Array or Iterator});

endsnippet
snippet ashk
$this->assertArrayHasKey(${1:key}, ${2:array});

endsnippet
snippet asnhk
this->assertArrayNotHasKey(${1:value}, ${2:array});

endsnippet
snippet ascha
$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');

endsnippet
snippet asi
$this->assertInstanceOf(${1:expected}, ${2:actual});

endsnippet
snippet tc
public function test${1:name_of_the_test}()
{
	${0:code}
}
endsnippet
